-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parser.y
-----------------------------------------------------------------------------

state 24 contains 2 shift/reduce conflicts.
state 26 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Expr                               (0)
	Expr -> Words                                      (1)
	Expr -> word '=' Expr                              (2)
	Expr -> Expr ';' Expr                              (3)
	Expr -> if Cond then Expr                          (4)
	Expr -> if Cond then Expr else Expr                (5)
	Expr -> '(' Expr ')'                               (6)
	Expr -> int                                        (7)
	Expr -> '"' word '"'                               (8)
	Words -> word Words                                (9)
	Words ->                                           (10)
	Cond -> Expr '>' Expr                              (11)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'='            { TokAssign }
	';'            { TokSemi }
	'('            { TokLP }
	')'            { TokRP }
	'"'            { TokDQ }
	word           { TokWord $$ }
	int            { TokInt $$ }
	'>'            { TokGT }
	if             { TokIf }
	else           { TokElse }
	then           { TokThen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8
	Words           rules 9, 10
	Cond            rule  11

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	';'            reduce using rule 10
	'('            shift, and enter state 5
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	if             shift, and enter state 9
	%eof           reduce using rule 10

	Expr           goto state 4
	Words          goto state 2

State 1


	word           shift, and enter state 3

	Words          goto state 2

State 2

	Expr -> Words .                                     (rule 1)

	';'            reduce using rule 1
	')'            reduce using rule 1
	'>'            reduce using rule 1
	else           reduce using rule 1
	then           reduce using rule 1
	%eof           reduce using rule 1


State 3

	Words -> word . Words                               (rule 9)

	';'            reduce using rule 10
	')'            reduce using rule 10
	word           shift, and enter state 3
	'>'            reduce using rule 10
	else           reduce using rule 10
	then           reduce using rule 10
	%eof           reduce using rule 10

	Words          goto state 12

State 4

	%start_parse -> Expr .                              (rule 0)
	Expr -> Expr . ';' Expr                             (rule 3)

	';'            shift, and enter state 16
	%eof           accept


State 5

	Expr -> '(' . Expr ')'                              (rule 6)

	';'            reduce using rule 10
	'('            shift, and enter state 5
	')'            reduce using rule 10
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	if             shift, and enter state 9

	Expr           goto state 15
	Words          goto state 2

State 6

	Expr -> '"' . word '"'                              (rule 8)

	word           shift, and enter state 14


State 7

	Expr -> word . '=' Expr                             (rule 2)
	Words -> word . Words                               (rule 9)

	'='            shift, and enter state 13
	';'            reduce using rule 10
	')'            reduce using rule 10
	word           shift, and enter state 3
	'>'            reduce using rule 10
	else           reduce using rule 10
	then           reduce using rule 10
	%eof           reduce using rule 10

	Words          goto state 12

State 8

	Expr -> int .                                       (rule 7)

	';'            reduce using rule 7
	')'            reduce using rule 7
	'>'            reduce using rule 7
	else           reduce using rule 7
	then           reduce using rule 7
	%eof           reduce using rule 7


State 9

	Expr -> if . Cond then Expr                         (rule 4)
	Expr -> if . Cond then Expr else Expr               (rule 5)

	';'            reduce using rule 10
	'('            shift, and enter state 5
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	'>'            reduce using rule 10
	if             shift, and enter state 9

	Expr           goto state 10
	Words          goto state 2
	Cond           goto state 11

State 10

	Expr -> Expr . ';' Expr                             (rule 3)
	Cond -> Expr . '>' Expr                             (rule 11)

	';'            shift, and enter state 16
	'>'            shift, and enter state 22


State 11

	Expr -> if Cond . then Expr                         (rule 4)
	Expr -> if Cond . then Expr else Expr               (rule 5)

	then           shift, and enter state 21


State 12

	Words -> word Words .                               (rule 9)

	';'            reduce using rule 9
	')'            reduce using rule 9
	'>'            reduce using rule 9
	else           reduce using rule 9
	then           reduce using rule 9
	%eof           reduce using rule 9


State 13

	Expr -> word '=' . Expr                             (rule 2)

	';'            reduce using rule 10
	'('            shift, and enter state 5
	')'            reduce using rule 10
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	'>'            reduce using rule 10
	if             shift, and enter state 9
	else           reduce using rule 10
	then           reduce using rule 10
	%eof           reduce using rule 10

	Expr           goto state 20
	Words          goto state 2

State 14

	Expr -> '"' word . '"'                              (rule 8)

	'"'            shift, and enter state 19


State 15

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> '(' Expr . ')'                              (rule 6)

	';'            shift, and enter state 16
	')'            shift, and enter state 18


State 16

	Expr -> Expr ';' . Expr                             (rule 3)

	';'            reduce using rule 10
	'('            shift, and enter state 5
	')'            reduce using rule 10
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	'>'            reduce using rule 10
	if             shift, and enter state 9
	else           reduce using rule 10
	then           reduce using rule 10
	%eof           reduce using rule 10

	Expr           goto state 17
	Words          goto state 2

State 17

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> Expr ';' Expr .                             (rule 3)

	';'            reduce using rule 3
	')'            reduce using rule 3
	'>'            reduce using rule 3
	else           reduce using rule 3
	then           reduce using rule 3
	%eof           reduce using rule 3


State 18

	Expr -> '(' Expr ')' .                              (rule 6)

	';'            reduce using rule 6
	')'            reduce using rule 6
	'>'            reduce using rule 6
	else           reduce using rule 6
	then           reduce using rule 6
	%eof           reduce using rule 6


State 19

	Expr -> '"' word '"' .                              (rule 8)

	';'            reduce using rule 8
	')'            reduce using rule 8
	'>'            reduce using rule 8
	else           reduce using rule 8
	then           reduce using rule 8
	%eof           reduce using rule 8


State 20

	Expr -> word '=' Expr .                             (rule 2)
	Expr -> Expr . ';' Expr                             (rule 3)

	';'            reduce using rule 2
	')'            reduce using rule 2
	'>'            reduce using rule 2
	else           reduce using rule 2
	then           reduce using rule 2
	%eof           reduce using rule 2


State 21

	Expr -> if Cond then . Expr                         (rule 4)
	Expr -> if Cond then . Expr else Expr               (rule 5)

	';'            reduce using rule 10
	'('            shift, and enter state 5
	')'            reduce using rule 10
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	'>'            reduce using rule 10
	if             shift, and enter state 9
	else           reduce using rule 10
	then           reduce using rule 10
	%eof           reduce using rule 10

	Expr           goto state 24
	Words          goto state 2

State 22

	Cond -> Expr '>' . Expr                             (rule 11)

	';'            reduce using rule 10
	'('            shift, and enter state 5
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	if             shift, and enter state 9
	then           reduce using rule 10

	Expr           goto state 23
	Words          goto state 2

State 23

	Expr -> Expr . ';' Expr                             (rule 3)
	Cond -> Expr '>' Expr .                             (rule 11)

	';'            shift, and enter state 16
	then           reduce using rule 11


State 24

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> if Cond then Expr .                         (rule 4)
	Expr -> if Cond then Expr . else Expr               (rule 5)

	';'            shift, and enter state 16
			(reduce using rule 4)

	')'            reduce using rule 4
	'>'            reduce using rule 4
	else           shift, and enter state 25
			(reduce using rule 4)

	then           reduce using rule 4
	%eof           reduce using rule 4


State 25

	Expr -> if Cond then Expr else . Expr               (rule 5)

	';'            reduce using rule 10
	'('            shift, and enter state 5
	')'            reduce using rule 10
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	'>'            reduce using rule 10
	if             shift, and enter state 9
	else           reduce using rule 10
	then           reduce using rule 10
	%eof           reduce using rule 10

	Expr           goto state 26
	Words          goto state 2

State 26

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> if Cond then Expr else Expr .               (rule 5)

	';'            shift, and enter state 16
			(reduce using rule 5)

	')'            reduce using rule 5
	'>'            reduce using rule 5
	else           reduce using rule 5
	then           reduce using rule 5
	%eof           reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 12
Number of terminals: 11
Number of non-terminals: 4
Number of states: 27
