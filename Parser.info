-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parser.y
-----------------------------------------------------------------------------

state 28 contains 2 shift/reduce conflicts.
state 33 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Expr                               (0)
	Expr -> Args                                       (1)
	Expr -> ConstStr '=' Const                         (2)
	Expr -> Expr ';' Expr                              (3)
	Expr -> if Cond then Expr                          (4)
	Expr -> if Cond then Expr else Expr                (5)
	Expr -> '(' Expr ')'                               (6)
	Expr ->                                            (7)
	Args -> Const                                      (8)
	Args -> Const Args                                 (9)
	Cond -> Const '>' Const                            (10)
	Cond -> Const '<' Const                            (11)
	Cond -> Const eql Const                            (12)
	Const -> ConstInt                                  (13)
	Const -> ConstStr                                  (14)
	ConstInt -> int                                    (15)
	ConstStr -> '"' word '"'                           (16)
	ConstStr -> word                                   (17)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'='            { TokAssign }
	';'            { TokSemi }
	'('            { TokLP }
	')'            { TokRP }
	'"'            { TokDQ }
	word           { TokWord $$ }
	int            { TokInt $$ }
	'>'            { TokGT }
	'<'            { TokLT }
	eql            { TokEql }
	if             { TokIf }
	else           { TokElse }
	then           { TokThen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7
	Args            rules 8, 9
	Cond            rules 10, 11, 12
	Const           rules 13, 14
	ConstInt        rule  15
	ConstStr        rules 16, 17

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	';'            reduce using rule 7
	'('            shift, and enter state 11
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	if             shift, and enter state 12
	%eof           reduce using rule 7

	Expr           goto state 9
	Args           goto state 2
	Const          goto state 3
	ConstInt       goto state 4
	ConstStr       goto state 10

State 1


	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8

	Args           goto state 2
	Const          goto state 3
	ConstInt       goto state 4
	ConstStr       goto state 5

State 2

	Expr -> Args .                                      (rule 1)

	';'            reduce using rule 1
	')'            reduce using rule 1
	else           reduce using rule 1
	%eof           reduce using rule 1


State 3

	Args -> Const .                                     (rule 8)
	Args -> Const . Args                                (rule 9)

	';'            reduce using rule 8
	')'            reduce using rule 8
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	else           reduce using rule 8
	%eof           reduce using rule 8

	Args           goto state 19
	Const          goto state 3
	ConstInt       goto state 4
	ConstStr       goto state 5

State 4

	Const -> ConstInt .                                 (rule 13)

	';'            reduce using rule 13
	')'            reduce using rule 13
	'"'            reduce using rule 13
	word           reduce using rule 13
	int            reduce using rule 13
	'>'            reduce using rule 13
	'<'            reduce using rule 13
	eql            reduce using rule 13
	else           reduce using rule 13
	then           reduce using rule 13
	%eof           reduce using rule 13


State 5

	Const -> ConstStr .                                 (rule 14)

	';'            reduce using rule 14
	')'            reduce using rule 14
	'"'            reduce using rule 14
	word           reduce using rule 14
	int            reduce using rule 14
	'>'            reduce using rule 14
	'<'            reduce using rule 14
	eql            reduce using rule 14
	else           reduce using rule 14
	then           reduce using rule 14
	%eof           reduce using rule 14


State 6

	ConstStr -> '"' . word '"'                          (rule 16)

	word           shift, and enter state 18


State 7

	ConstStr -> word .                                  (rule 17)

	'='            reduce using rule 17
	';'            reduce using rule 17
	')'            reduce using rule 17
	'"'            reduce using rule 17
	word           reduce using rule 17
	int            reduce using rule 17
	'>'            reduce using rule 17
	'<'            reduce using rule 17
	eql            reduce using rule 17
	else           reduce using rule 17
	then           reduce using rule 17
	%eof           reduce using rule 17


State 8

	ConstInt -> int .                                   (rule 15)

	';'            reduce using rule 15
	')'            reduce using rule 15
	'"'            reduce using rule 15
	word           reduce using rule 15
	int            reduce using rule 15
	'>'            reduce using rule 15
	'<'            reduce using rule 15
	eql            reduce using rule 15
	else           reduce using rule 15
	then           reduce using rule 15
	%eof           reduce using rule 15


State 9

	%start_parse -> Expr .                              (rule 0)
	Expr -> Expr . ';' Expr                             (rule 3)

	';'            shift, and enter state 17
	%eof           accept


State 10

	Expr -> ConstStr . '=' Const                        (rule 2)
	Const -> ConstStr .                                 (rule 14)

	'='            shift, and enter state 16
	';'            reduce using rule 14
	')'            reduce using rule 14
	'"'            reduce using rule 14
	word           reduce using rule 14
	int            reduce using rule 14
	else           reduce using rule 14
	%eof           reduce using rule 14


State 11

	Expr -> '(' . Expr ')'                              (rule 6)

	';'            reduce using rule 7
	'('            shift, and enter state 11
	')'            reduce using rule 7
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	if             shift, and enter state 12

	Expr           goto state 15
	Args           goto state 2
	Const          goto state 3
	ConstInt       goto state 4
	ConstStr       goto state 10

State 12

	Expr -> if . Cond then Expr                         (rule 4)
	Expr -> if . Cond then Expr else Expr               (rule 5)

	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8

	Cond           goto state 13
	Const          goto state 14
	ConstInt       goto state 4
	ConstStr       goto state 5

State 13

	Expr -> if Cond . then Expr                         (rule 4)
	Expr -> if Cond . then Expr else Expr               (rule 5)

	then           shift, and enter state 27


State 14

	Cond -> Const . '>' Const                           (rule 10)
	Cond -> Const . '<' Const                           (rule 11)
	Cond -> Const . eql Const                           (rule 12)

	'>'            shift, and enter state 24
	'<'            shift, and enter state 25
	eql            shift, and enter state 26


State 15

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> '(' Expr . ')'                              (rule 6)

	';'            shift, and enter state 17
	')'            shift, and enter state 23


State 16

	Expr -> ConstStr '=' . Const                        (rule 2)

	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8

	Const          goto state 22
	ConstInt       goto state 4
	ConstStr       goto state 5

State 17

	Expr -> Expr ';' . Expr                             (rule 3)

	';'            reduce using rule 7
	'('            shift, and enter state 11
	')'            reduce using rule 7
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	if             shift, and enter state 12
	else           reduce using rule 7
	%eof           reduce using rule 7

	Expr           goto state 21
	Args           goto state 2
	Const          goto state 3
	ConstInt       goto state 4
	ConstStr       goto state 10

State 18

	ConstStr -> '"' word . '"'                          (rule 16)

	'"'            shift, and enter state 20


State 19

	Args -> Const Args .                                (rule 9)

	';'            reduce using rule 9
	')'            reduce using rule 9
	else           reduce using rule 9
	%eof           reduce using rule 9


State 20

	ConstStr -> '"' word '"' .                          (rule 16)

	'='            reduce using rule 16
	';'            reduce using rule 16
	')'            reduce using rule 16
	'"'            reduce using rule 16
	word           reduce using rule 16
	int            reduce using rule 16
	'>'            reduce using rule 16
	'<'            reduce using rule 16
	eql            reduce using rule 16
	else           reduce using rule 16
	then           reduce using rule 16
	%eof           reduce using rule 16


State 21

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> Expr ';' Expr .                             (rule 3)

	';'            reduce using rule 3
	')'            reduce using rule 3
	else           reduce using rule 3
	%eof           reduce using rule 3


State 22

	Expr -> ConstStr '=' Const .                        (rule 2)

	';'            reduce using rule 2
	')'            reduce using rule 2
	else           reduce using rule 2
	%eof           reduce using rule 2


State 23

	Expr -> '(' Expr ')' .                              (rule 6)

	';'            reduce using rule 6
	')'            reduce using rule 6
	else           reduce using rule 6
	%eof           reduce using rule 6


State 24

	Cond -> Const '>' . Const                           (rule 10)

	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8

	Const          goto state 31
	ConstInt       goto state 4
	ConstStr       goto state 5

State 25

	Cond -> Const '<' . Const                           (rule 11)

	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8

	Const          goto state 30
	ConstInt       goto state 4
	ConstStr       goto state 5

State 26

	Cond -> Const eql . Const                           (rule 12)

	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8

	Const          goto state 29
	ConstInt       goto state 4
	ConstStr       goto state 5

State 27

	Expr -> if Cond then . Expr                         (rule 4)
	Expr -> if Cond then . Expr else Expr               (rule 5)

	';'            reduce using rule 7
	'('            shift, and enter state 11
	')'            reduce using rule 7
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	if             shift, and enter state 12
	else           reduce using rule 7
	%eof           reduce using rule 7

	Expr           goto state 28
	Args           goto state 2
	Const          goto state 3
	ConstInt       goto state 4
	ConstStr       goto state 10

State 28

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> if Cond then Expr .                         (rule 4)
	Expr -> if Cond then Expr . else Expr               (rule 5)

	';'            shift, and enter state 17
			(reduce using rule 4)

	')'            reduce using rule 4
	else           shift, and enter state 32
			(reduce using rule 4)

	%eof           reduce using rule 4


State 29

	Cond -> Const eql Const .                           (rule 12)

	then           reduce using rule 12


State 30

	Cond -> Const '<' Const .                           (rule 11)

	then           reduce using rule 11


State 31

	Cond -> Const '>' Const .                           (rule 10)

	then           reduce using rule 10


State 32

	Expr -> if Cond then Expr else . Expr               (rule 5)

	';'            reduce using rule 7
	'('            shift, and enter state 11
	')'            reduce using rule 7
	'"'            shift, and enter state 6
	word           shift, and enter state 7
	int            shift, and enter state 8
	if             shift, and enter state 12
	else           reduce using rule 7
	%eof           reduce using rule 7

	Expr           goto state 33
	Args           goto state 2
	Const          goto state 3
	ConstInt       goto state 4
	ConstStr       goto state 10

State 33

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> if Cond then Expr else Expr .               (rule 5)

	';'            shift, and enter state 17
			(reduce using rule 5)

	')'            reduce using rule 5
	else           reduce using rule 5
	%eof           reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 18
Number of terminals: 13
Number of non-terminals: 7
Number of states: 34
