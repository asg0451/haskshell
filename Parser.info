-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parser.y
-----------------------------------------------------------------------------

state 29 contains 2 shift/reduce conflicts.
state 31 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Expr                               (0)
	Expr -> Commands                                   (1)
	Expr -> word '=' Expr                              (2)
	Expr -> Expr ';' Expr                              (3)
	Expr -> if Cond then Expr                          (4)
	Expr -> if Cond then Expr else Expr                (5)
	Expr -> '(' Expr ')'                               (6)
	Expr -> Const                                      (7)
	Commands -> word Commands                          (8)
	Commands ->                                        (9)
	Cond -> Expr '>' Expr                              (10)
	Cond -> Expr '<' Expr                              (11)
	Cond -> Expr eql Expr                              (12)
	Const -> int                                       (13)
	Const -> '"' word '"'                              (14)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'='            { TokAssign }
	';'            { TokSemi }
	'('            { TokLP }
	')'            { TokRP }
	'"'            { TokDQ }
	word           { TokWord $$ }
	int            { TokInt $$ }
	'>'            { TokGT }
	'<'            { TokLT }
	eql            { TokEql }
	if             { TokIf }
	else           { TokElse }
	then           { TokThen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7
	Commands        rules 8, 9
	Cond            rules 10, 11, 12
	Const           rules 13, 14

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	';'            reduce using rule 9
	'('            shift, and enter state 6
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	if             shift, and enter state 10
	%eof           reduce using rule 9

	Expr           goto state 4
	Commands       goto state 2
	Const          goto state 5

State 1


	word           shift, and enter state 3

	Commands       goto state 2

State 2

	Expr -> Commands .                                  (rule 1)

	';'            reduce using rule 1
	')'            reduce using rule 1
	'>'            reduce using rule 1
	'<'            reduce using rule 1
	eql            reduce using rule 1
	else           reduce using rule 1
	then           reduce using rule 1
	%eof           reduce using rule 1


State 3

	Commands -> word . Commands                         (rule 8)

	';'            reduce using rule 9
	')'            reduce using rule 9
	word           shift, and enter state 3
	'>'            reduce using rule 9
	'<'            reduce using rule 9
	eql            reduce using rule 9
	else           reduce using rule 9
	then           reduce using rule 9
	%eof           reduce using rule 9

	Commands       goto state 13

State 4

	%start_parse -> Expr .                              (rule 0)
	Expr -> Expr . ';' Expr                             (rule 3)

	';'            shift, and enter state 17
	%eof           accept


State 5

	Expr -> Const .                                     (rule 7)

	';'            reduce using rule 7
	')'            reduce using rule 7
	'>'            reduce using rule 7
	'<'            reduce using rule 7
	eql            reduce using rule 7
	else           reduce using rule 7
	then           reduce using rule 7
	%eof           reduce using rule 7


State 6

	Expr -> '(' . Expr ')'                              (rule 6)

	';'            reduce using rule 9
	'('            shift, and enter state 6
	')'            reduce using rule 9
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	if             shift, and enter state 10

	Expr           goto state 16
	Commands       goto state 2
	Const          goto state 5

State 7

	Const -> '"' . word '"'                             (rule 14)

	word           shift, and enter state 15


State 8

	Expr -> word . '=' Expr                             (rule 2)
	Commands -> word . Commands                         (rule 8)

	'='            shift, and enter state 14
	';'            reduce using rule 9
	')'            reduce using rule 9
	word           shift, and enter state 3
	'>'            reduce using rule 9
	'<'            reduce using rule 9
	eql            reduce using rule 9
	else           reduce using rule 9
	then           reduce using rule 9
	%eof           reduce using rule 9

	Commands       goto state 13

State 9

	Const -> int .                                      (rule 13)

	';'            reduce using rule 13
	')'            reduce using rule 13
	'>'            reduce using rule 13
	'<'            reduce using rule 13
	eql            reduce using rule 13
	else           reduce using rule 13
	then           reduce using rule 13
	%eof           reduce using rule 13


State 10

	Expr -> if . Cond then Expr                         (rule 4)
	Expr -> if . Cond then Expr else Expr               (rule 5)

	';'            reduce using rule 9
	'('            shift, and enter state 6
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	'>'            reduce using rule 9
	'<'            reduce using rule 9
	eql            reduce using rule 9
	if             shift, and enter state 10

	Expr           goto state 11
	Commands       goto state 2
	Cond           goto state 12
	Const          goto state 5

State 11

	Expr -> Expr . ';' Expr                             (rule 3)
	Cond -> Expr . '>' Expr                             (rule 10)
	Cond -> Expr . '<' Expr                             (rule 11)
	Cond -> Expr . eql Expr                             (rule 12)

	';'            shift, and enter state 17
	'>'            shift, and enter state 23
	'<'            shift, and enter state 24
	eql            shift, and enter state 25


State 12

	Expr -> if Cond . then Expr                         (rule 4)
	Expr -> if Cond . then Expr else Expr               (rule 5)

	then           shift, and enter state 22


State 13

	Commands -> word Commands .                         (rule 8)

	';'            reduce using rule 8
	')'            reduce using rule 8
	'>'            reduce using rule 8
	'<'            reduce using rule 8
	eql            reduce using rule 8
	else           reduce using rule 8
	then           reduce using rule 8
	%eof           reduce using rule 8


State 14

	Expr -> word '=' . Expr                             (rule 2)

	';'            reduce using rule 9
	'('            shift, and enter state 6
	')'            reduce using rule 9
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	'>'            reduce using rule 9
	'<'            reduce using rule 9
	eql            reduce using rule 9
	if             shift, and enter state 10
	else           reduce using rule 9
	then           reduce using rule 9
	%eof           reduce using rule 9

	Expr           goto state 21
	Commands       goto state 2
	Const          goto state 5

State 15

	Const -> '"' word . '"'                             (rule 14)

	'"'            shift, and enter state 20


State 16

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> '(' Expr . ')'                              (rule 6)

	';'            shift, and enter state 17
	')'            shift, and enter state 19


State 17

	Expr -> Expr ';' . Expr                             (rule 3)

	';'            reduce using rule 9
	'('            shift, and enter state 6
	')'            reduce using rule 9
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	'>'            reduce using rule 9
	'<'            reduce using rule 9
	eql            reduce using rule 9
	if             shift, and enter state 10
	else           reduce using rule 9
	then           reduce using rule 9
	%eof           reduce using rule 9

	Expr           goto state 18
	Commands       goto state 2
	Const          goto state 5

State 18

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> Expr ';' Expr .                             (rule 3)

	';'            reduce using rule 3
	')'            reduce using rule 3
	'>'            reduce using rule 3
	'<'            reduce using rule 3
	eql            reduce using rule 3
	else           reduce using rule 3
	then           reduce using rule 3
	%eof           reduce using rule 3


State 19

	Expr -> '(' Expr ')' .                              (rule 6)

	';'            reduce using rule 6
	')'            reduce using rule 6
	'>'            reduce using rule 6
	'<'            reduce using rule 6
	eql            reduce using rule 6
	else           reduce using rule 6
	then           reduce using rule 6
	%eof           reduce using rule 6


State 20

	Const -> '"' word '"' .                             (rule 14)

	';'            reduce using rule 14
	')'            reduce using rule 14
	'>'            reduce using rule 14
	'<'            reduce using rule 14
	eql            reduce using rule 14
	else           reduce using rule 14
	then           reduce using rule 14
	%eof           reduce using rule 14


State 21

	Expr -> word '=' Expr .                             (rule 2)
	Expr -> Expr . ';' Expr                             (rule 3)

	';'            reduce using rule 2
	')'            reduce using rule 2
	'>'            reduce using rule 2
	'<'            reduce using rule 2
	eql            reduce using rule 2
	else           reduce using rule 2
	then           reduce using rule 2
	%eof           reduce using rule 2


State 22

	Expr -> if Cond then . Expr                         (rule 4)
	Expr -> if Cond then . Expr else Expr               (rule 5)

	';'            reduce using rule 9
	'('            shift, and enter state 6
	')'            reduce using rule 9
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	'>'            reduce using rule 9
	'<'            reduce using rule 9
	eql            reduce using rule 9
	if             shift, and enter state 10
	else           reduce using rule 9
	then           reduce using rule 9
	%eof           reduce using rule 9

	Expr           goto state 29
	Commands       goto state 2
	Const          goto state 5

State 23

	Cond -> Expr '>' . Expr                             (rule 10)

	';'            reduce using rule 9
	'('            shift, and enter state 6
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	if             shift, and enter state 10
	then           reduce using rule 9

	Expr           goto state 28
	Commands       goto state 2
	Const          goto state 5

State 24

	Cond -> Expr '<' . Expr                             (rule 11)

	';'            reduce using rule 9
	'('            shift, and enter state 6
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	if             shift, and enter state 10
	then           reduce using rule 9

	Expr           goto state 27
	Commands       goto state 2
	Const          goto state 5

State 25

	Cond -> Expr eql . Expr                             (rule 12)

	';'            reduce using rule 9
	'('            shift, and enter state 6
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	if             shift, and enter state 10
	then           reduce using rule 9

	Expr           goto state 26
	Commands       goto state 2
	Const          goto state 5

State 26

	Expr -> Expr . ';' Expr                             (rule 3)
	Cond -> Expr eql Expr .                             (rule 12)

	';'            shift, and enter state 17
	then           reduce using rule 12


State 27

	Expr -> Expr . ';' Expr                             (rule 3)
	Cond -> Expr '<' Expr .                             (rule 11)

	';'            shift, and enter state 17
	then           reduce using rule 11


State 28

	Expr -> Expr . ';' Expr                             (rule 3)
	Cond -> Expr '>' Expr .                             (rule 10)

	';'            shift, and enter state 17
	then           reduce using rule 10


State 29

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> if Cond then Expr .                         (rule 4)
	Expr -> if Cond then Expr . else Expr               (rule 5)

	';'            shift, and enter state 17
			(reduce using rule 4)

	')'            reduce using rule 4
	'>'            reduce using rule 4
	'<'            reduce using rule 4
	eql            reduce using rule 4
	else           shift, and enter state 30
			(reduce using rule 4)

	then           reduce using rule 4
	%eof           reduce using rule 4


State 30

	Expr -> if Cond then Expr else . Expr               (rule 5)

	';'            reduce using rule 9
	'('            shift, and enter state 6
	')'            reduce using rule 9
	'"'            shift, and enter state 7
	word           shift, and enter state 8
	int            shift, and enter state 9
	'>'            reduce using rule 9
	'<'            reduce using rule 9
	eql            reduce using rule 9
	if             shift, and enter state 10
	else           reduce using rule 9
	then           reduce using rule 9
	%eof           reduce using rule 9

	Expr           goto state 31
	Commands       goto state 2
	Const          goto state 5

State 31

	Expr -> Expr . ';' Expr                             (rule 3)
	Expr -> if Cond then Expr else Expr .               (rule 5)

	';'            shift, and enter state 17
			(reduce using rule 5)

	')'            reduce using rule 5
	'>'            reduce using rule 5
	'<'            reduce using rule 5
	eql            reduce using rule 5
	else           reduce using rule 5
	then           reduce using rule 5
	%eof           reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 15
Number of terminals: 13
Number of non-terminals: 5
Number of states: 32
